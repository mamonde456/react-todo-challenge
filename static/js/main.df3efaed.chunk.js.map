{"version":3,"sources":["atom.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","persistAtom","recoilPersist","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","DLELTE","slice","DOING","DONE","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","basename","process","boardColor","cardColor","document","getElementById"],"mappings":"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","file":"static/js/main.df3efaed.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n  \"DLELTE\" = \"DLELTE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nconst { persistAtom } = recoilPersist();\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n  effects_UNSTABLE: [persistAtom],\n});\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atom\";\n\ninterface IInput {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IInput>();\n  const onValid = ({ toDo }: IInput) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(onValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atom\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      if (name === Categories.DLELTE) {\n        return [\n          ...oldToDos.slice(0, targetIndex),\n          ...oldToDos.slice(targetIndex + 1),\n        ];\n      }\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          todo\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          done\n        </button>\n      )}\n      <button name={Categories.DLELTE} onClick={onClick}>\n        delete\n      </button>\n    </li>\n  );\n}\n\nexport default ToDo;\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector, toDoState } from \"../atom\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>Todo</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { dark } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <RecoilRoot>\n        <ThemeProvider theme={dark}>\n          <App />\n        </ThemeProvider>\n      </RecoilRoot>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const dark: DefaultTheme = {\n  bgColor: \"#3F8CF2\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n  textColor: \"black\",\n};\n"],"sourceRoot":""}